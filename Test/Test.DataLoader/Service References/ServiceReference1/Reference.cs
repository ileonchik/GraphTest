//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Test.DataLoader.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://test.com/LoaderService", ConfigurationName="ServiceReference1.ILoaderService")]
    public interface ILoaderService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://test.com/LoaderService/ILoaderService/SaveAdjacency", ReplyAction="http://test.com/LoaderService/ILoaderService/SaveAdjacencyResponse")]
        void SaveAdjacency(string startNodeId, string endNodeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://test.com/LoaderService/ILoaderService/SaveAdjacency", ReplyAction="http://test.com/LoaderService/ILoaderService/SaveAdjacencyResponse")]
        System.Threading.Tasks.Task SaveAdjacencyAsync(string startNodeId, string endNodeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://test.com/LoaderService/ILoaderService/SaveNode", ReplyAction="http://test.com/LoaderService/ILoaderService/SaveNodeResponse")]
        void SaveNode(string id, string label);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://test.com/LoaderService/ILoaderService/SaveNode", ReplyAction="http://test.com/LoaderService/ILoaderService/SaveNodeResponse")]
        System.Threading.Tasks.Task SaveNodeAsync(string id, string label);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://test.com/LoaderService/ILoaderService/ClearDatabase", ReplyAction="http://test.com/LoaderService/ILoaderService/ClearDatabaseResponse")]
        void ClearDatabase();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://test.com/LoaderService/ILoaderService/ClearDatabase", ReplyAction="http://test.com/LoaderService/ILoaderService/ClearDatabaseResponse")]
        System.Threading.Tasks.Task ClearDatabaseAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILoaderServiceChannel : Test.DataLoader.ServiceReference1.ILoaderService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoaderServiceClient : System.ServiceModel.ClientBase<Test.DataLoader.ServiceReference1.ILoaderService>, Test.DataLoader.ServiceReference1.ILoaderService {
        
        public LoaderServiceClient() {
        }
        
        public LoaderServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LoaderServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LoaderServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LoaderServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void SaveAdjacency(string startNodeId, string endNodeId) {
            base.Channel.SaveAdjacency(startNodeId, endNodeId);
        }
        
        public System.Threading.Tasks.Task SaveAdjacencyAsync(string startNodeId, string endNodeId) {
            return base.Channel.SaveAdjacencyAsync(startNodeId, endNodeId);
        }
        
        public void SaveNode(string id, string label) {
            base.Channel.SaveNode(id, label);
        }
        
        public System.Threading.Tasks.Task SaveNodeAsync(string id, string label) {
            return base.Channel.SaveNodeAsync(id, label);
        }
        
        public void ClearDatabase() {
            base.Channel.ClearDatabase();
        }
        
        public System.Threading.Tasks.Task ClearDatabaseAsync() {
            return base.Channel.ClearDatabaseAsync();
        }
    }
}
